version: "3.9"

services:
    # Valkey (redis-like)
    valkey:
        image: valkey/valkey:latest
        container_name: taskmate_valkey
        restart: "on-failure:3"
        ports:
            - "6379:6379" # можно убрать, если не нужен доступ с хоста
        volumes:
            - valkey_data:/data
            - ./valkey.conf:/etc/valkey/valkey.conf:ro
        command: [ "valkey-server", "/etc/valkey/valkey.conf" ]
        networks:
            - web

    # Postgres
    postgres:
        image: postgres:18
        container_name: taskmate_postgres
        restart: "on-failure:3"
        env_file:
            - ./.env
        environment:
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh:ro
        ports:
            - "5432:5432" # можно убрать при желании
        networks:
            - web

    pgadmin:
        image: dpage/pgadmin4:latest
        container_name: taskmate_pgadmin
        restart: "on-failure:3"
        env_file:
            - ./.env
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
        ports:
            - "8081:80"
        volumes:
            - pgadmin_data:/var/lib/pgadmin
        depends_on:
            - postgres
        networks:
            - web

    # Laravel PHP-FPM (официальный образ, без кастомного Dockerfile)
    src_laravel_api:
        build:
            context: ./TaskMateBackend/
            dockerfile: Dockerfile
        container_name: taskmate_src_laravel_api
        restart: "on-failure:3"
        env_file:
            - ./.env
        environment:
            APP_DEBUG: ${DEBUG_MODE}
            APP_ENV: ${APP_ENVIRONMENT}
            APP_KEY: ${LARAVEL_APP_KEY}
            APP_URL: ${LARAVEL_APP_URL}
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE_LARAVEL}
            DB_USER: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
        volumes:
            - ./TaskMateBackend/:/var/www/src_laravel_api
            - ./TaskMateBackend/.env:/var/www/src_laravel_api/.env
            - ./wait-for-it.sh:/wait-for-it.sh:ro
        expose:
            - "9000"
        depends_on:
            - postgres
            - valkey
        networks:
            - web

    # Telegram Bot PHP-FPM
    src_telegram_bot_api:
        build:
            context: ./TaskMateTelegramBot/
            dockerfile: Dockerfile
        container_name: taskmate_src_telegram_bot_api
        restart: "on-failure:3"
        env_file:
            - ./.env
        extra_hosts:
            - "host.docker.internal:host-gateway"
        environment:
            APP_DEBUG: ${DEBUG_MODE}
            APP_ENV: ${APP_ENVIRONMENT}
            APP_KEY: ${TASK_MATE_TELEGRAM_BOT_APP_KEY}
            APP_URL: ${TASK_MATE_TELEGRAM_BOT_APP_URL}
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE_TASK_MATE_TELEGRAM_BOT}
            DB_USER: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            TELEGRAM_TOKEN: ${TASK_MATE_TELEGRAM_BOT_TOKEN}
            VCRM_API_URL: ${VCRM_API_URL}
            VCRM_API_TOKEN: ${VCRM_API_TOKEN}
            NUTGRAM_LOG_CHAT_ID: ${TASK_MATE_TELEGRAM_BOT_LOG_CHAT_ID}
        volumes:
            - ./TaskMateTelegramBot/:/var/www/src_telegram_bot_api
            - ./TaskMateTelegramBot/.env:/var/www/src_telegram_bot_api/.env
            - ./wait-for-it.sh:/wait-for-it.sh:ro
        expose:
            - "9000"
        depends_on:
            - src_laravel_api
            - postgres
            - valkey
        networks:
            - web

    # Vanilla Flow Telegram Bot PHP-FPM
    src_vanilla_flow_telegram_bot_api:
        build:
            context: ./VanillaFlowTelegramBot/
            dockerfile: Dockerfile
            target: runner
        container_name: taskmate_src_vanilla_flow_telegram_bot_api
        restart: "on-failure:3"
        env_file:
            - ./.env
        extra_hosts:
            - "host.docker.internal:host-gateway"
        environment:
            APP_ENV: ${APP_ENVIRONMENT}
            APP_DEBUG: ${DEBUG_MODE}
            APP_KEY: ${VANILLA_FLOW_TELEGRAM_BOT_APP_KEY}
            APP_URL: ${VANILLA_FLOW_TELEGRAM_BOT_APP_URL}
            DB_CONNECTION: ${DB_CONNECTION}
            DB_HOST: ${DB_HOST}
            DB_PORT: ${DB_PORT}
            DB_DATABASE: ${DB_DATABASE_VANILLA_FLOW_TELEGRAM_BOT}
            DB_USER: ${DB_USERNAME}
            DB_PASSWORD: ${DB_PASSWORD}
            TELEGRAM_TOKEN: ${VANILLA_FLOW_TELEGRAM_BOT_TOKEN}
            VCRM_API_URL: ${VCRM_API_URL}
            VCRM_API_TOKEN: ${VCRM_API_TOKEN}
            NUTGRAM_LOG_CHAT_ID: ${VANILLA_FLOW_TELEGRAM_BOT_LOG_CHAT_ID}
        volumes:
            - ./VanillaFlowTelegramBot/:/var/www/src_vanilla_flow_telegram_bot_api
            - ./VanillaFlowTelegramBot/.env:/var/www/src_vanilla_flow_telegram_bot_api/.env
            - ./wait-for-it.sh:/wait-for-it.sh:ro
        expose:
            - "9000"
        depends_on:
            - postgres
            - valkey
        networks:
            - web

    # Nginx reverse-proxy (служит HTTPS и проксирует к php-fpm по fastcgi)
    nginx:
        image: nginx:latest
        container_name: taskmate_nginx
        restart: "on-failure:3"
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
            - ./certbot/www:/var/www/certbot
            - ./certbot/conf:/etc/letsencrypt
            - ./TaskMateBackend/:/var/www/src_laravel_api:ro
            - ./TaskMateTelegramBot/:/var/www/src_telegram_bot_api:ro
            - ./VanillaFlowTelegramBot/:/var/www/src_vanilla_flow_telegram_bot_api:ro
        depends_on:
            - src_laravel_api
            - src_telegram_bot_api
            - src_vanilla_flow_telegram_bot_api
        networks:
            - web

    # Certbot – одноразовый запуск для получения сертификатов (вручную запускаем ниже)
    # НЕ запускаем команду по умолчанию — будем запускать вручную через docker compose run
    certbot:
        image: certbot/certbot
        container_name: taskmate_certbot
        volumes:
            - ./certbot/conf:/etc/letsencrypt
            - ./certbot/www:/var/www/certbot
        networks:
            - web

volumes:
    valkey_data:
    postgres_data:
    pgadmin_data:


networks:
    web:
        driver: bridge
